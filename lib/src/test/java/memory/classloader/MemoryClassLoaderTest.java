/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package memory.classloader;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Scanner;

import org.junit.jupiter.api.Test;

class MemoryClassLoaderTest {

	@Test
	void loadAClass() throws ClassNotFoundException, IOException, NoSuchMethodException, SecurityException,
			IllegalAccessException, IllegalArgumentException, InvocationTargetException {

		byte[] jarBytes = new byte[0];
		try (InputStream is = this.getClass().getClassLoader().getResourceAsStream("lib.jar")) {
			jarBytes = is.readAllBytes();
		}

		MemoryClassLoader classLoader = new MemoryClassLoader(Thread.currentThread().getContextClassLoader(), jarBytes);
		Class<?> clazz = classLoader.loadClass("hello.world.HelloWorld");
		assertNotNull(clazz);

		Method meth = clazz.getMethod("main", String[].class);
		String[] params = null; // init params accordingly
		meth.invoke(null, (Object) params); // static method doesn't have an instance

		try (Scanner scanner = new Scanner(clazz.getClassLoader().getResourceAsStream("ItsAResource.txt"))
				.useDelimiter("\\A")) {
			String resourceString = scanner.next();
			System.out.println(resourceString);
		}

	}

}
